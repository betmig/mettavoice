name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Build
        run: npx vite build

      - name: Debug SSH setup
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          ls -la ~/.ssh || true
          ssh-keygen -l -f ~/.ssh/deploy_key || true
          echo "Host is: $DEPLOY_HOST"
          
      - name: Setup SSH
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" | tr -d '\r' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/deploy_key || (echo "Failed to add SSH key" && cat ~/.ssh/deploy_key && exit 1)
          ssh-keyscan -t rsa $DEPLOY_HOST >> ~/.ssh/known_hosts || (echo "Failed to scan host key" && exit 1)
          ls -la ~/.ssh
          
      - name: Test SSH Connection
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -vvv ${DEPLOY_USER}@${DEPLOY_HOST} 'echo "SSH connection test"'
          
      - name: Deploy
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        run: |
          rsync -avz --delete -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            dist/ \
            ${DEPLOY_USER}@${DEPLOY_HOST}:/home/${DEPLOY_USER}/docker/voice/data/
          
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} \
            "cd /home/${DEPLOY_USER}/docker/voice && docker-compose down && docker-compose up -d"